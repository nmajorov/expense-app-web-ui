import React, { createContext, useContext, ReactNode } from 'react';
import { useSelector } from 'react-redux';
import { UserProfile } from '../types/Login.ts';
import { AppState } from '../store/Store.ts';

// Define the shape of the context data
interface SecurityContextType {
    isAuthenticated: boolean;
    user: UserProfile | undefined;
}

// Create the context with a default value
const SecurityContext = createContext<SecurityContextType | undefined>(
    undefined
);

// Create a provider component
interface SecurityProviderProps {
    children: ReactNode;
}

/**
 * Generated by AI .. Should we trust  it ? :)
 * @param param0
 * @returns
 */
export const SecurityProvider: React.FC<SecurityProviderProps> = ({
    children,
}) => {
    // Read the login state directly from the Redux store
    const { isAuthenticated, user } = useSelector((state: AppState) => ({
        isAuthenticated: state.loginState.authenticated,
        user: state.loginState.user,
    }));

    const value = { isAuthenticated, user };

    return (
        <SecurityContext.Provider value={value}>
            {children}
        </SecurityContext.Provider>
    );
};

// Create a custom hook for easy access to the context
export const useSecurity = (): SecurityContextType => {
    const context = useContext(SecurityContext);
    if (context === undefined) {
        throw new Error('useSecurity must be used within a SecurityProvider');
    }
    return context;
};
