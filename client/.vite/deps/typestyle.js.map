{
  "version": 3,
  "sources": ["../../../node_modules/.deno/typestyle@2.4.0/node_modules/typestyle/lib.es2015/types.js", "../../../node_modules/.deno/free-style@3.1.0/node_modules/free-style/src/index.ts", "../../../node_modules/.deno/typestyle@2.4.0/node_modules/typestyle/lib.es2015/internal/formatting.js", "../../../node_modules/.deno/typestyle@2.4.0/node_modules/typestyle/lib.es2015/internal/utilities.js", "../../../node_modules/.deno/typestyle@2.4.0/node_modules/typestyle/lib.es2015/internal/typestyle.js", "../../../node_modules/.deno/typestyle@2.4.0/node_modules/typestyle/lib.es2015/index.js"],
  "sourcesContent": ["", "/**\n * The unique id is used for unique hashes.\n */\nlet uniqueId = 0;\n\n/**\n * Valid CSS property values.\n */\nexport type PropertyValue = number | boolean | string;\n\n/**\n * Input styles object.\n */\nexport interface Styles {\n  $unique?: boolean;\n  $displayName?: string;\n  [selector: string]:\n    | null\n    | undefined\n    | PropertyValue\n    | PropertyValue[]\n    | Styles;\n}\n\n/**\n * Hash algorithm interface.\n */\nexport type HashFunction = (str: string) => string;\n\n/**\n * Quick dictionary lookup for unit-less numbers.\n */\nconst CSS_NUMBER: Record<string, true> = Object.create(null);\n\n/**\n * CSS properties that are valid unit-less numbers.\n *\n * Ref: https://github.com/facebook/react/blob/master/packages/react-dom/src/shared/CSSProperty.js\n */\nconst CSS_NUMBER_KEYS = [\n  \"animation-iteration-count\",\n  \"border-image-outset\",\n  \"border-image-slice\",\n  \"border-image-width\",\n  \"box-flex\",\n  \"box-flex-group\",\n  \"box-ordinal-group\",\n  \"column-count\",\n  \"columns\",\n  \"counter-increment\",\n  \"counter-reset\",\n  \"flex\",\n  \"flex-grow\",\n  \"flex-positive\",\n  \"flex-shrink\",\n  \"flex-negative\",\n  \"flex-order\",\n  \"font-weight\",\n  \"grid-area\",\n  \"grid-column\",\n  \"grid-column-end\",\n  \"grid-column-span\",\n  \"grid-column-start\",\n  \"grid-row\",\n  \"grid-row-end\",\n  \"grid-row-span\",\n  \"grid-row-start\",\n  \"line-clamp\",\n  \"line-height\",\n  \"opacity\",\n  \"order\",\n  \"orphans\",\n  \"tab-size\",\n  \"widows\",\n  \"z-index\",\n  \"zoom\",\n  // SVG properties.\n  \"fill-opacity\",\n  \"flood-opacity\",\n  \"stop-opacity\",\n  \"stroke-dasharray\",\n  \"stroke-dashoffset\",\n  \"stroke-miterlimit\",\n  \"stroke-opacity\",\n  \"stroke-width\"\n];\n\n// Add vendor prefixes to all unit-less properties.\nfor (const property of CSS_NUMBER_KEYS) {\n  for (const prefix of [\"-webkit-\", \"-ms-\", \"-moz-\", \"-o-\", \"\"]) {\n    CSS_NUMBER[prefix + property] = true;\n  }\n}\n\n/**\n * Escape a CSS class name.\n */\nfunction escape(str: string) {\n  return str.replace(/[ !#$%&()*+,./;<=>?@[\\]^`{|}~\"'\\\\]/g, \"\\\\$&\");\n}\n\n/**\n * Transform a JavaScript property into a CSS property.\n */\nfunction hyphenate(propertyName: string): string {\n  return propertyName\n    .replace(/[A-Z]/g, (m: string) => `-${m.toLowerCase()}`)\n    .replace(/^ms-/, \"-ms-\"); // Internet Explorer vendor prefix.\n}\n\n/**\n * Generate a hash value from a string.\n */\nfunction stringHash(str: string): string {\n  let value = 5381;\n  let len = str.length;\n  while (len--) value = (value * 33) ^ str.charCodeAt(len);\n  return (value >>> 0).toString(36);\n}\n\n/**\n * Transform a style string to a CSS string.\n */\nfunction styleToString(key: string, value: PropertyValue) {\n  if (value && typeof value === \"number\" && !CSS_NUMBER[key]) {\n    return `${key}:${value}px`;\n  }\n\n  return `${key}:${value}`;\n}\n\n/**\n * Sort an array of tuples by first value.\n */\nfunction sortTuples<T extends any[]>(value: T[]): T[] {\n  return value.sort((a, b) => (a[0] > b[0] ? 1 : -1));\n}\n\n/**\n * Categorize user styles.\n */\nfunction parseStyles(styles: Styles, hasNestedStyles: boolean) {\n  const properties: Array<[string, PropertyValue | PropertyValue[]]> = [];\n  const nestedStyles: Array<[string, Styles]> = [];\n\n  // Sort keys before adding to styles.\n  for (const key of Object.keys(styles)) {\n    const name = key.trim();\n    const value = styles[key];\n\n    if (name.charCodeAt(0) !== 36 /* $ */ && value != null) {\n      if (typeof value === \"object\" && !Array.isArray(value)) {\n        nestedStyles.push([name, value]);\n      } else {\n        properties.push([hyphenate(name), value]);\n      }\n    }\n  }\n\n  return {\n    style: stringifyProperties(sortTuples(properties)),\n    nested: hasNestedStyles ? nestedStyles : sortTuples(nestedStyles),\n    isUnique: !!styles.$unique\n  };\n}\n\n/**\n * Stringify an array of property tuples.\n */\nfunction stringifyProperties(\n  properties: Array<[string, PropertyValue | PropertyValue[]]>\n) {\n  return properties\n    .map(([name, value]) => {\n      if (!Array.isArray(value)) return styleToString(name, value);\n\n      return value.map(x => styleToString(name, x)).join(\";\");\n    })\n    .join(\";\");\n}\n\n/**\n * Interpolate CSS selectors.\n */\nfunction interpolate(selector: string, parent: string) {\n  if (selector.indexOf(\"&\") === -1) return `${parent} ${selector}`;\n  return selector.replace(/&/g, parent);\n}\n\ntype StylizeStyle = { selector: string; style: string; isUnique: boolean };\n\ntype StylizeRule = {\n  selector: string;\n  style: string;\n  rules: StylizeRule[];\n  styles: StylizeStyle[];\n};\n\n/**\n * Recursive loop building styles with deferred selectors.\n */\nfunction stylize(\n  selector: string,\n  styles: Styles,\n  rulesList: StylizeRule[],\n  stylesList: StylizeStyle[],\n  parent?: string\n) {\n  const { style, nested, isUnique } = parseStyles(styles, selector !== \"\");\n  let pid = style;\n\n  if (selector.charCodeAt(0) === 64 /* @ */) {\n    const child: StylizeRule = {\n      selector,\n      styles: [],\n      rules: [],\n      style: parent ? \"\" : style\n    };\n    rulesList.push(child);\n\n    // Nested styles support (e.g. `.foo > @media > .bar`).\n    if (style && parent) {\n      child.styles.push({ selector: parent, style, isUnique });\n    }\n\n    for (const [name, value] of nested) {\n      pid += name + stylize(name, value, child.rules, child.styles, parent);\n    }\n  } else {\n    const key = parent ? interpolate(selector, parent) : selector;\n\n    if (style) stylesList.push({ selector: key, style, isUnique });\n\n    for (const [name, value] of nested) {\n      pid += name + stylize(name, value, rulesList, stylesList, key);\n    }\n  }\n\n  return pid;\n}\n\n/**\n * Transform `stylize` tree into style objects.\n */\nfunction composeStylize(\n  cache: Cache<Rule | Style>,\n  pid: string,\n  rulesList: StylizeRule[],\n  stylesList: StylizeStyle[],\n  className: string,\n  isStyle: boolean\n) {\n  for (const { selector, style, isUnique } of stylesList) {\n    const key = isStyle ? interpolate(selector, className) : selector;\n    const id = isUnique\n      ? `u\\0${(++uniqueId).toString(36)}`\n      : `s\\0${pid}\\0${style}`;\n    const item = new Style(style, id);\n    item.add(new Selector(key, `k\\0${pid}\\0${key}`));\n    cache.add(item);\n  }\n\n  for (const { selector, style, rules, styles } of rulesList) {\n    const item = new Rule(selector, style, `r\\0${pid}\\0${selector}\\0${style}`);\n    composeStylize(item, pid, rules, styles, className, isStyle);\n    cache.add(item);\n  }\n}\n\n/**\n * Cache to list to styles.\n */\nfunction join(arr: string[]): string {\n  let res = \"\";\n  for (let i = 0; i < arr.length; i++) res += arr[i];\n  return res;\n}\n\n/**\n * Propagate change events.\n */\nexport interface Changes {\n  add(style: Container<any>, index: number): void;\n  change(style: Container<any>, oldIndex: number, newIndex: number): void;\n  remove(style: Container<any>, index: number): void;\n}\n\n/**\n * Noop changes.\n */\nconst noopChanges: Changes = {\n  add: () => undefined,\n  change: () => undefined,\n  remove: () => undefined\n};\n\n/**\n * Cache-able interface.\n */\nexport interface Container<T> {\n  id: string;\n  clone(): T;\n  getStyles(): string;\n}\n\n/**\n * Implement a cache/event emitter.\n */\nexport class Cache<T extends Container<any>> {\n  sheet: string[] = [];\n  changeId = 0;\n\n  private _keys: string[] = [];\n  private _children: Record<string, T | undefined> = Object.create(null);\n  private _counters: Record<string, number | undefined> = Object.create(null);\n\n  constructor(public changes: Changes = noopChanges) {}\n\n  add(style: T): void {\n    const count = this._counters[style.id] || 0;\n    const item: T = this._children[style.id] || style.clone();\n\n    this._counters[style.id] = count + 1;\n\n    if (count === 0) {\n      this._children[item.id] = item;\n      this._keys.push(item.id);\n      this.sheet.push(item.getStyles());\n      this.changeId++;\n      this.changes.add(item, this._keys.length - 1);\n    } else if (item instanceof Cache && style instanceof Cache) {\n      const curIndex = this._keys.indexOf(style.id);\n      const prevItemChangeId = item.changeId;\n\n      item.merge(style);\n\n      if (item.changeId !== prevItemChangeId) {\n        this.sheet.splice(curIndex, 1, item.getStyles());\n        this.changeId++;\n        this.changes.change(item, curIndex, curIndex);\n      }\n    }\n  }\n\n  remove(style: T): void {\n    const count = this._counters[style.id];\n\n    if (count) {\n      this._counters[style.id] = count - 1;\n\n      const item = this._children[style.id]!;\n      const index = this._keys.indexOf(item.id);\n\n      if (count === 1) {\n        delete this._counters[style.id];\n        delete this._children[style.id];\n\n        this._keys.splice(index, 1);\n        this.sheet.splice(index, 1);\n        this.changeId++;\n        this.changes.remove(item, index);\n      } else if (item instanceof Cache && style instanceof Cache) {\n        const prevChangeId = item.changeId;\n\n        item.unmerge(style);\n\n        if (item.changeId !== prevChangeId) {\n          this.sheet.splice(index, 1, item.getStyles());\n          this.changeId++;\n          this.changes.change(item, index, index);\n        }\n      }\n    }\n  }\n\n  values(): T[] {\n    return this._keys.map(key => this._children[key]!);\n  }\n\n  merge(cache: Cache<any>) {\n    for (const item of cache.values()) this.add(item);\n    return this;\n  }\n\n  unmerge(cache: Cache<any>) {\n    for (const item of cache.values()) this.remove(item);\n    return this;\n  }\n\n  clone(): Cache<T> {\n    return new Cache<T>().merge(this);\n  }\n}\n\n/**\n * Selector is a dumb class made to represent nested CSS selectors.\n */\nexport class Selector implements Container<Selector> {\n  constructor(public selector: string, public id: string) {}\n\n  getStyles() {\n    return this.selector;\n  }\n\n  clone(): Selector {\n    return this;\n  }\n}\n\n/**\n * The style container registers a style string with selectors.\n */\nexport class Style extends Cache<Selector> implements Container<Style> {\n  constructor(public style: string, public id: string) {\n    super();\n  }\n\n  getStyles(): string {\n    return `${this.sheet.join(\",\")}{${this.style}}`;\n  }\n\n  clone(): Style {\n    return new Style(this.style, this.id).merge(this);\n  }\n}\n\n/**\n * Implement rule logic for style output.\n */\nexport class Rule extends Cache<Rule | Style> implements Container<Rule> {\n  constructor(public rule: string, public style: string, public id: string) {\n    super();\n  }\n\n  getStyles(): string {\n    return `${this.rule}{${this.style}${join(this.sheet)}}`;\n  }\n\n  clone(): Rule {\n    return new Rule(this.rule, this.style, this.id).merge(this);\n  }\n}\n\nfunction key(pid: string, styles: Styles): string {\n  const key = `f${stringHash(pid)}`;\n  if (process.env.NODE_ENV === \"production\" || !styles.$displayName) return key;\n  return `${styles.$displayName}_${key}`;\n}\n\n/**\n * The FreeStyle class implements the API for everything else.\n */\nexport class FreeStyle extends Cache<Rule | Style>\n  implements Container<FreeStyle> {\n  constructor(public id: string, changes?: Changes) {\n    super(changes);\n  }\n\n  registerStyle(styles: Styles) {\n    const rulesList: StylizeRule[] = [];\n    const stylesList: StylizeStyle[] = [];\n    const pid = stylize(\"&\", styles, rulesList, stylesList);\n    const id = key(pid, styles);\n    const selector = `.${\n      process.env.NODE_ENV === \"production\" ? id : escape(id)\n    }`;\n    composeStylize(this, pid, rulesList, stylesList, selector, true);\n    return id;\n  }\n\n  registerKeyframes(keyframes: Styles) {\n    return this.registerHashRule(\"@keyframes\", keyframes);\n  }\n\n  registerHashRule(prefix: string, styles: Styles) {\n    const rulesList: StylizeRule[] = [];\n    const stylesList: StylizeStyle[] = [];\n    const pid = stylize(\"\", styles, rulesList, stylesList);\n    const id = key(pid, styles);\n    const selector = `${prefix} ${\n      process.env.NODE_ENV === \"production\" ? id : escape(id)\n    }`;\n    const rule = new Rule(selector, \"\", `h\\0${pid}\\0${prefix}`);\n    composeStylize(rule, pid, rulesList, stylesList, \"\", false);\n    this.add(rule);\n    return id;\n  }\n\n  registerRule(rule: string, styles: Styles) {\n    const rulesList: StylizeRule[] = [];\n    const stylesList: StylizeStyle[] = [];\n    const pid = stylize(rule, styles, rulesList, stylesList);\n    composeStylize(this, pid, rulesList, stylesList, \"\", false);\n  }\n\n  registerCss(styles: Styles) {\n    return this.registerRule(\"\", styles);\n  }\n\n  getStyles(): string {\n    return join(this.sheet);\n  }\n\n  clone(): FreeStyle {\n    return new FreeStyle(this.id, this.changes).merge(this);\n  }\n}\n\n/**\n * Exports a simple function to create a new instance.\n */\nexport function create(changes?: Changes) {\n  return new FreeStyle(`f${(++uniqueId).toString(36)}`, changes);\n}\n", "/**\n * We need to do the following to *our* objects before passing to freestyle:\n * - For any `$nest` directive move up to FreeStyle style nesting\n * - For any `$unique` directive map to FreeStyle Unique\n * - For any `$debugName` directive return the debug name\n */\nexport function convertToStyles(object) {\n    /** The final result we will return */\n    var styles = {};\n    for (var key in object) {\n        /** Grab the value upfront */\n        var val = object[key];\n        /** TypeStyle configuration options */\n        if (key === '$nest') {\n            var nested = val;\n            for (var selector in nested) {\n                var subproperties = nested[selector];\n                styles[selector] = convertToStyles(subproperties);\n            }\n        }\n        else if (key === '$debugName') {\n            styles.$displayName = val;\n        }\n        else {\n            styles[key] = val;\n        }\n    }\n    return styles;\n}\n// todo: better name here\nexport function convertToKeyframes(frames) {\n    var result = {};\n    for (var offset in frames) {\n        if (offset !== '$debugName') {\n            result[offset] = frames[offset];\n        }\n    }\n    if (frames.$debugName) {\n        result.$displayName = frames.$debugName;\n    }\n    return result;\n}\n", "/** Raf for node + browser */\nexport var raf = typeof requestAnimationFrame === 'undefined'\n    /**\n     * Make sure setTimeout is always invoked with\n     * `this` set to `window` or `global` automatically\n     **/\n    ? function (cb) { return setTimeout(cb); }\n    /**\n     * Make sure window.requestAnimationFrame is always invoked with `this` window\n     * We might have raf without window in case of `raf/polyfill` (recommended by React)\n     **/\n    : typeof window === 'undefined'\n        ? requestAnimationFrame\n        : requestAnimationFrame.bind(window);\n/**\n * Utility to join classes conditionally\n */\nexport function classes() {\n    var classes = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        classes[_i] = arguments[_i];\n    }\n    return classes\n        .map(function (c) { return c && typeof c === 'object' ? Object.keys(c).map(function (key) { return !!c[key] && key; }) : [c]; })\n        .reduce(function (flattened, c) { return flattened.concat(c); }, [])\n        .filter(function (c) { return !!c; })\n        .join(' ');\n}\n/**\n * Merges various styles into a single style object.\n * Note: if two objects have the same property the last one wins\n */\nexport function extend() {\n    var objects = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        objects[_i] = arguments[_i];\n    }\n    /** The final result we will return */\n    var result = {};\n    for (var _a = 0, objects_1 = objects; _a < objects_1.length; _a++) {\n        var object = objects_1[_a];\n        if (object == null || object === false) {\n            continue;\n        }\n        for (var key in object) {\n            /** Falsy values except a explicit 0 is ignored */\n            var val = object[key];\n            if (!val && val !== 0) {\n                continue;\n            }\n            /** if nested media or pseudo selector */\n            if (key === '$nest' && val) {\n                result[key] = result['$nest'] ? extend(result['$nest'], val) : val;\n            }\n            /** if freestyle sub key that needs merging. We come here due to our recursive calls */\n            else if ((key.indexOf('&') !== -1 || key.indexOf('@media') === 0)) {\n                result[key] = result[key] ? extend(result[key], val) : val;\n            }\n            else {\n                result[key] = val;\n            }\n        }\n    }\n    return result;\n}\n/**\n * Utility to help customize styles with media queries. e.g.\n * ```\n * style(\n *  media({maxWidth:500}, {color:'red'})\n * )\n * ```\n */\nexport var media = function (mediaQuery) {\n    var _a;\n    var objects = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        objects[_i - 1] = arguments[_i];\n    }\n    var mediaQuerySections = [];\n    if (mediaQuery.type)\n        mediaQuerySections.push(mediaQuery.type);\n    if (mediaQuery.orientation)\n        mediaQuerySections.push(\"(orientation: \" + mediaQuery.orientation + \")\");\n    if (mediaQuery.minWidth)\n        mediaQuerySections.push(\"(min-width: \" + mediaLength(mediaQuery.minWidth) + \")\");\n    if (mediaQuery.maxWidth)\n        mediaQuerySections.push(\"(max-width: \" + mediaLength(mediaQuery.maxWidth) + \")\");\n    if (mediaQuery.minHeight)\n        mediaQuerySections.push(\"(min-height: \" + mediaLength(mediaQuery.minHeight) + \")\");\n    if (mediaQuery.maxHeight)\n        mediaQuerySections.push(\"(max-height: \" + mediaLength(mediaQuery.maxHeight) + \")\");\n    if (mediaQuery.prefersColorScheme)\n        mediaQuerySections.push(\"(prefers-color-scheme: \" + mediaQuery.prefersColorScheme + \")\");\n    var stringMediaQuery = \"@media \" + mediaQuerySections.join(' and ');\n    var object = {\n        $nest: (_a = {},\n            _a[stringMediaQuery] = extend.apply(void 0, objects),\n            _a)\n    };\n    return object;\n};\nvar mediaLength = function (value) {\n    return typeof value === 'string' ? value : value + \"px\";\n};\n", "import * as FreeStyle from \"free-style\";\nimport { convertToStyles, convertToKeyframes } from './formatting';\nimport { extend, raf } from './utilities';\n/**\n * Creates an instance of free style with our options\n */\nvar createFreeStyle = function () { return FreeStyle.create(); };\n/**\n * Maintains a single stylesheet and keeps it in sync with requested styles\n */\nvar TypeStyle = /** @class */ (function () {\n    function TypeStyle(_a) {\n        var _this = this;\n        var autoGenerateTag = _a.autoGenerateTag;\n        /**\n         * Insert `raw` CSS as a string. This is useful for e.g.\n         * - third party CSS that you are customizing with template strings\n         * - generating raw CSS in JavaScript\n         * - reset libraries like normalize.css that you can use without loaders\n         */\n        this.cssRaw = function (mustBeValidCSS) {\n            if (!mustBeValidCSS) {\n                return;\n            }\n            _this._raw += mustBeValidCSS || '';\n            _this._pendingRawChange = true;\n            _this._styleUpdated();\n        };\n        /**\n         * Takes CSSProperties and registers it to a global selector (body, html, etc.)\n         */\n        this.cssRule = function (selector) {\n            var objects = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                objects[_i - 1] = arguments[_i];\n            }\n            var styles = convertToStyles(extend.apply(void 0, objects));\n            _this._freeStyle.registerRule(selector, styles);\n            _this._styleUpdated();\n            return;\n        };\n        /**\n         * Renders styles to the singleton tag imediately\n         * NOTE: You should only call it on initial render to prevent any non CSS flash.\n         * After that it is kept sync using `requestAnimationFrame` and we haven't noticed any bad flashes.\n         **/\n        this.forceRenderStyles = function () {\n            var target = _this._getTag();\n            if (!target) {\n                return;\n            }\n            target.textContent = _this.getStyles();\n        };\n        /**\n         * Utility function to register an @font-face\n         */\n        this.fontFace = function () {\n            var fontFace = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                fontFace[_i] = arguments[_i];\n            }\n            var freeStyle = _this._freeStyle;\n            for (var _a = 0, _b = fontFace; _a < _b.length; _a++) {\n                var face = _b[_a];\n                freeStyle.registerRule('@font-face', face);\n            }\n            _this._styleUpdated();\n            return;\n        };\n        /**\n         * Allows use to use the stylesheet in a node.js environment\n         */\n        this.getStyles = function () {\n            return (_this._raw || '') + _this._freeStyle.getStyles();\n        };\n        /**\n         * Takes keyframes and returns a generated animationName\n         */\n        this.keyframes = function (frames) {\n            var keyframes = convertToKeyframes(frames);\n            // TODO: replace $debugName with display name\n            var animationName = _this._freeStyle.registerKeyframes(keyframes);\n            _this._styleUpdated();\n            return animationName;\n        };\n        /**\n         * Helps with testing. Reinitializes FreeStyle + raw\n         */\n        this.reinit = function () {\n            /** reinit freestyle */\n            var freeStyle = createFreeStyle();\n            _this._freeStyle = freeStyle;\n            _this._lastFreeStyleChangeId = freeStyle.changeId;\n            /** reinit raw */\n            _this._raw = '';\n            _this._pendingRawChange = false;\n            /** Clear any styles that were flushed */\n            var target = _this._getTag();\n            if (target) {\n                target.textContent = '';\n            }\n        };\n        /** Sets the target tag where we write the css on style updates */\n        this.setStylesTarget = function (tag) {\n            /** Clear any data in any previous tag */\n            if (_this._tag) {\n                _this._tag.textContent = '';\n            }\n            _this._tag = tag;\n            /** This special time buffer immediately */\n            _this.forceRenderStyles();\n        };\n        /**\n         * Takes an object where property names are ideal class names and property values are CSSProperties, and\n         * returns an object where property names are the same ideal class names and the property values are\n         * the actual generated class names using the ideal class name as the $debugName\n         */\n        this.stylesheet = function (classes) {\n            var classNames = Object.getOwnPropertyNames(classes);\n            var result = {};\n            for (var _i = 0, classNames_1 = classNames; _i < classNames_1.length; _i++) {\n                var className = classNames_1[_i];\n                var classDef = classes[className];\n                if (classDef) {\n                    classDef.$debugName = className;\n                    result[className] = _this.style(classDef);\n                }\n            }\n            return result;\n        };\n        var freeStyle = createFreeStyle();\n        this._autoGenerateTag = autoGenerateTag;\n        this._freeStyle = freeStyle;\n        this._lastFreeStyleChangeId = freeStyle.changeId;\n        this._pending = 0;\n        this._pendingRawChange = false;\n        this._raw = '';\n        this._tag = undefined;\n        // rebind prototype to TypeStyle.  It might be better to do a function() { return this.style.apply(this, arguments)}\n        this.style = this.style.bind(this);\n    }\n    /**\n     * Only calls cb all sync operations settle\n     */\n    TypeStyle.prototype._afterAllSync = function (cb) {\n        var _this = this;\n        this._pending++;\n        var pending = this._pending;\n        raf(function () {\n            if (pending !== _this._pending) {\n                return;\n            }\n            cb();\n        });\n    };\n    TypeStyle.prototype._getTag = function () {\n        if (this._tag) {\n            return this._tag;\n        }\n        if (this._autoGenerateTag) {\n            var tag = typeof window === 'undefined'\n                ? { textContent: '' }\n                : document.createElement('style');\n            if (typeof document !== 'undefined') {\n                document.head.appendChild(tag);\n            }\n            this._tag = tag;\n            return tag;\n        }\n        return undefined;\n    };\n    /** Checks if the style tag needs updating and if so queues up the change */\n    TypeStyle.prototype._styleUpdated = function () {\n        var _this = this;\n        var changeId = this._freeStyle.changeId;\n        var lastChangeId = this._lastFreeStyleChangeId;\n        if (!this._pendingRawChange && changeId === lastChangeId) {\n            return;\n        }\n        this._lastFreeStyleChangeId = changeId;\n        this._pendingRawChange = false;\n        this._afterAllSync(function () { return _this.forceRenderStyles(); });\n    };\n    TypeStyle.prototype.style = function () {\n        var className = this._freeStyle.registerStyle(convertToStyles(extend.apply(undefined, arguments)));\n        this._styleUpdated();\n        return className;\n    };\n    return TypeStyle;\n}());\nexport { TypeStyle };\n", "import { TypeStyle } from './internal/typestyle';\nexport { TypeStyle };\n/**\n * All the CSS types in the 'types' namespace\n */\nimport * as types from './types';\nexport { types };\n/**\n * Export certain utilities\n */\nexport { extend, classes, media } from './internal/utilities';\n/** Zero configuration, default instance of TypeStyle */\nvar ts = new TypeStyle({ autoGenerateTag: true });\n/** Sets the target tag where we write the css on style updates */\nexport var setStylesTarget = ts.setStylesTarget;\n/**\n * Insert `raw` CSS as a string. This is useful for e.g.\n * - third party CSS that you are customizing with template strings\n * - generating raw CSS in JavaScript\n * - reset libraries like normalize.css that you can use without loaders\n */\nexport var cssRaw = ts.cssRaw;\n/**\n * Takes CSSProperties and registers it to a global selector (body, html, etc.)\n */\nexport var cssRule = ts.cssRule;\n/**\n * Renders styles to the singleton tag imediately\n * NOTE: You should only call it on initial render to prevent any non CSS flash.\n * After that it is kept sync using `requestAnimationFrame` and we haven't noticed any bad flashes.\n **/\nexport var forceRenderStyles = ts.forceRenderStyles;\n/**\n * Utility function to register an @font-face\n */\nexport var fontFace = ts.fontFace;\n/**\n * Allows use to use the stylesheet in a node.js environment\n */\nexport var getStyles = ts.getStyles;\n/**\n * Takes keyframes and returns a generated animationName\n */\nexport var keyframes = ts.keyframes;\n/**\n * Helps with testing. Reinitializes FreeStyle + raw\n */\nexport var reinit = ts.reinit;\n/**\n * Takes CSSProperties and return a generated className you can use on your component\n */\nexport var style = ts.style;\n/**\n * Takes an object where property names are ideal class names and property values are CSSProperties, and\n * returns an object where property names are the same ideal class names and the property values are\n * the actual generated class names using the ideal class name as the $debugName\n */\nexport var stylesheet = ts.stylesheet;\n/**\n * Creates a new instance of TypeStyle separate from the default instance.\n *\n * - Use this for creating a different typestyle instance for a shadow dom component.\n * - Use this if you don't want an auto tag generated and you just want to collect the CSS.\n *\n * NOTE: styles aren't shared between different instances.\n */\nexport function createTypeStyle(target) {\n    var instance = new TypeStyle({ autoGenerateTag: false });\n    if (target) {\n        instance.setStylesTarget(target);\n    }\n    return instance;\n}\n"],
  "mappings": "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",
  "names": ["key", "style", "keyframes", "key", "classes", "key", "TypeStyle", "fontFace", "freeStyle", "_a", "keyframes", "classes"]
}
